services:
  db:
    # We use a mariadb image which supports both amd64 & arm64 architecture
    image: mariadb:10-focal
    # If you really want to use MySQL, uncomment the following line
    #image: mysql:8
    command: "--default-authentication-plugin=mysql_native_password"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", 'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db-password)" --silent']
      interval: 3s
      retries: 5
      start_period: 30s
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backnet
    environment:
      - MYSQL_DATABASE=example
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 3306
      - 33060

  unstructured-api:
    image: quay.io/unstructured-io/unstructured-api:latest
    container_name: unstructured-api
    restart: always
    ports:
      - "8001:8000"
    environment:
      - UNSTRUCTURED_MEMORY_FREE_MINIMUM_MB=2000
    networks:
      - backnet
    command: sh -c 'while :; do docker logs unstructured-api | grep -q "unstructured_api WARNING Rejecting because free memory" && docker restart unstructured-api; sleep 10; done'
    healthcheck:
      test: ["CMD-SHELL", "echo", "true"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: backend
      target: builder
    restart: always
    secrets:
      - db-password
      - stripe
    # We use 'volumes' here for immediate file changes
    # ./backend: is where your local backend code resides
    # /code is the directory specified in the Dockerfile, inside the container
    volumes:
      - ./backend:/code
    ports:
      - 8000:8000
    networks:
      - backnet
      - frontnet
    depends_on:
      db:
        condition: service_healthy
      unstructured-api:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - backnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  db-data:

secrets:
  db-password:
    file: db/password.txt
  stripe:
    file: stripe/keys.txt

networks:
  backnet:
  frontnet:
